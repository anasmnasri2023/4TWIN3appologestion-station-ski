version: '3.8'

services:
  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: stationSki
      MYSQL_USER: root
      MYSQL_PASSWORD: ""
    ports:
      - "3306:3306"
    networks:
      - spring_network
    volumes:
      - mysql_data:/var/lib/mysql
    command:
      --default-authentication-plugin=mysql_native_password
      --wait_timeout=28800
      --interactive_timeout=28800
      --max_connections=1000
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 20s
      retries: 15
      start_period: 60s

  spring_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring_backend
    depends_on:
      - mysql_db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql_db:3306/stationSki?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL5InnoDBDialect
      SPRING_JPA_OPEN_IN_VIEW: "false"
      LOGGING_LEVEL_ROOT: info
      LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} - %-5level - %logger{45} - %msg %n"
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK: DEBUG
      LOGGING_LEVEL_TN_ESPRIT_SPRING: DEBUG
      TZ: Africa/Tunis
    ports:
      - "8087:8087"
    restart: always
    networks:
      - spring_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - stationski-net

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - stationski-net
    depends_on:
      - prometheus

  sonarqube:
    image: sonarqube:community
    container_name: sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    networks:
      - stationski-net
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    depends_on:
      - sonarqube-db

  sonarqube-db:
    image: postgres:13
    container_name: sonarqube-db
    restart: unless-stopped
    networks:
      - stationski-net
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql/data

volumes:
  mysql_data:
  grafana_data:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  sonarqube_db:

networks:
  spring_network:
    driver: bridge
  stationski-net:
    driver: bridge
