pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'http://192.168.33.10:9000'
        SONARQUBE_TOKEN = credentials('scanner')
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Test') {
            steps {
                script {
                    // Lancer les tests comme IntelliJ
                    sh 'mvn test'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Construire sans relancer les tests
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Building images') {
            steps {
                script {
                    sh 'docker-compose build'
                }
            }
        }


        // Uploading Docker images into Nexus Registry

      stage('Deploy to Nexus') {
          steps {
              script {
                  def imageName = "springbootapp"
                  def imageTag = "1.0"
                  def nexusUrl = "192.168.33.10:8081"  // âœ… le bon port ici

                  // Tag l'image Docker pour Nexus
                  sh "docker tag devops-pipeline_ghassen_spring_app:latest ${nexusUrl}/${imageName}:${imageTag}"

                  // Connexion et push vers Nexus
                  docker.withRegistry("http://${nexusUrl}", registryCredentials) {
                      sh "docker push ${nexusUrl}/${imageName}:${imageTag}"
                  }
              }
          }
      }



            stage('Run application') {
                steps {
                    script {
                        docker.withRegistry("http://${registry}", registryCredentials) {
                            sh "docker pull ${registry}/springbootapp:1.0"
                            sh 'docker-compose up -d'
                        }
                    }
                }
            }



        stage('Package') {
                    steps {
                        script {
                            // Create final JAR file
                            sh 'mvn package -DskipTests'
                            // Archive the built JAR
                            archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                        }
                    }
                }
            }

    post {
        always {
            echo 'Pipeline completed'
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
