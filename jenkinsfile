pipeline {
    agent any

    environment {

     SONARQUBE_SERVER = 'http://192.168.33.10:9000'
     SONARQUBE_TOKEN = credentials('scanner')  // Ensure 'scanner' matches the Jenkins credential ID
    registryCredentials = "nexus"
    registry = "192.168.33.10:8083"
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone your GitHub repository
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    // Install dependencies and build the package (skip tests for now)
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Run Tests') {
                    steps {
                        script {
                            try {
                                echo "Running JUnit tests using external MySQL..."
                                sh """
                                    mvn test \
                                    -Dspring.datasource.url=jdbc:mysql://192.168.77.129:3306/stationSki?createDatabaseIfNotExist=true \
                                    -Dspring.datasource.username=root \
                                    -Dspring.datasource.password= \
                                    -Dspring.jpa.hibernate.ddl-auto=update
                                """
                            } catch (Exception e) {
                                echo "JUnit tests failed: ${e}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                    post {
                        always {
                            junit '**/target/surefire-reports/*.xml'
                        }
                    }
                }

                stage('SonarQube Analysis') {
                    steps {
                        script {
                            try {
                                // Step 1: Build and test with MySQL connection parameters (generates jacoco.xml)
                                sh """
                                    mvn clean install \
                                    -Dspring.datasource.url=jdbc:mysql://192.168.77.129:3306/stationSki?createDatabaseIfNotExist=true \
                                    -Dspring.datasource.username=root \
                                    -Dspring.datasource.password= \
                                    -Dspring.jpa.hibernate.ddl-auto=update
                                """

                                // Step 2: Show content of JaCoCo report folder
                                sh 'ls -l target/site/jacoco/'

                                // Step 3: Run SonarQube analysis with coverage report
                                sh """
                                    mvn sonar:sonar \
                                    -Dsonar.projectKey=tn.esprit.myspringapp \
                                    -Dsonar.host.url=${SONARQUBE_SERVER} \
                                    -Dsonar.login=${SONARQUBE_TOKEN} \
                                    -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                                """
                            } catch (Exception e) {
                                echo "SonarQube analysis failed: ${e}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }




        // Building Docker images
        stage('Building images ') {
        steps{
        script {
        sh('docker-compose build')
        }
        }
        }

        // Uploading Docker images into Nexus Registry
     stage('Deploy to Nexus') {
         steps {
             script {
                 // Tag the image for your Nexus registry
                 sh 'docker tag devops-pipeline_ghassen_spring_app:latest 192.168.33.10:8083/springbootapp:1.0'

                 docker.withRegistry("http://${registry}", registryCredentials) {
                     sh 'docker push 192.168.33.10:8083/springbootapp:1.0'
                 }
             }
         }
     }


     stage('Run application') {
         steps {
             script {
                 docker.withRegistry("http://${registry}", registryCredentials) {
                     sh "docker pull ${registry}/springbootapp:1.0"
                     sh 'docker-compose up -d'
                 }
             }
         }
     }





        stage('Package') {
            steps {
                script {
                    // Create final JAR file
                    sh 'mvn package -DskipTests'
                    // Archive the built JAR
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
    }



    post {
        always {
            echo 'Pipeline completed'
            // Clean up workspace if needed
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
