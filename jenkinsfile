pipeline {
    agent any

    tools {
        maven 'M2_HOME'    // Nom configuré dans Jenkins > Global Tool Configuration
        jdk 'JAVA_HOME'    // Nom configuré dans Jenkins > Global Tool Configuration
    }

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
        SONARQUBE_SERVER = 'http://192.168.1.122:9000'
        registryCredentials = 'nexus'
        registry = '192.168.33.10:8083'
    }

    stages {
        stage('Debug Environment') {
            steps {
                sh 'echo "JAVA_HOME: $JAVA_HOME"'
                sh 'echo "PATH: $PATH"'
                sh 'java -version || true'
                sh 'mvn -version || true'
                sh 'ls -la $JAVA_HOME/bin || true'
            }
        }

        stage('Cloner le dépôt') {
            steps {
                git branch: 'YasmineAttia-4twin3-Apollo',
                    url: 'https://github.com/anasmnasri2023/4TWIN3appologestion-station-ski.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner' // Ce nom doit correspondre à celui défini dans Jenkins
                    withSonarQubeEnv('scanner') {     // Ce nom doit correspondre à l'installation SonarQube déclarée
                        sh """
                            ${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=station-ski \
                            -Dsonar.sources=. \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.host.url=${SONARQUBE_SERVER}
                        """
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
      
        
      stage('Building images') {
            steps {
                script {
                    sh 'docker-compose build'
                }
            }
        }
       stage('Deploy to Nexus') {
        steps {
            script {
                docker.withRegistry("http://${registry}", registryCredentials) {
                    sh('docker push 192.168.33.10:8083/springbootapp:1.0')
                }
            }
        }
      }

        stage('Run application') {
         steps {
             script {
                 docker.withRegistry("http://${registry}", registryCredentials) {
                     sh "docker pull ${registry}/springbootapp:1.0"
                     sh 'docker-compose up -d'
                 }
             }
         }
     }
     stage('Run Prometheus') {
            steps {
                script {
                    sh 'docker stop prometheus || true'
                    sh 'docker rm prometheus || true'
                    sh 'docker run -d --name prometheus -p 9090:9090 prom/prometheus'
                }
            }
        }

        stage('Run Grafana') {
            steps {
                script {
                    sh 'docker stop grafana || true'
                    sh 'docker rm grafana || true'
                    sh 'docker run -d --name grafana -p 3000:3000 grafana/grafana'
                }
            }
        }

    }

    post {
        always {
            echo 'Build completed'
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
