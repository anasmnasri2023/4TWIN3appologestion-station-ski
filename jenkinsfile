pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'http://192.168.33.10:9000'
        SONARQUBE_TOKEN = credentials('scanner')  // Ensure 'scanner' matches the Jenkins credential ID
        registryCredentials = "nexus"
        registry = "192.168.33.10:8083"
        // Add your MySQL connection parameters here
        DB_URL = 'jdbc:mysql://192.168.33.10:3306/your_database_name?createDatabaseIfNotExist=true'
        DB_USERNAME = 'root'
        DB_PASSWORD = '' // Add password if needed
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        // Add the test stage right after checkout or before build
        stage('Run Tests') {
            steps {
                script {
                    try {
                        echo "Running JUnit tests with MySQL database..."
                        sh """
                            mvn test \
                            -Dspring.datasource.url=${DB_URL} \
                            -Dspring.datasource.username=${DB_USERNAME} \
                            -Dspring.datasource.password=${DB_PASSWORD} \
                            -Dspring.jpa.hibernate.ddl-auto=update
                        """
                    } catch (Exception e) {
                        echo "Tests failed: ${e}"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    // Now build with tests (since we ran them separately)
                    sh 'mvn clean package'
                }
            }
        }

        // Rest of your existing stages...
        stage('Building images') {
            steps {
                script {
                    sh('docker-compose build')
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    sh 'docker tag devops-pipeline_ghassen_spring_app:latest 192.168.33.10:8083/springbootapp:1.0'
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh 'docker push 192.168.33.10:8083/springbootapp:1.0'
                    }
                }
            }
        }

        stage('Run application') {
            steps {
                script {
                    docker.withRegistry("http://${registry}", registryCredentials) {
                        sh "docker pull ${registry}/springbootapp:1.0"
                        sh 'docker-compose up -d'
                    }
                }
            }
        }

        stage('Package') {
            steps {
                script {
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}