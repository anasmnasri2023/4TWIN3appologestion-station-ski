pipeline {
    agent any

    tools {
        maven 'M2_HOME'
        jdk 'JAVA_HOME'
    }

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        PATH = "${JAVA_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Debug Environment') {
            steps {
                sh 'echo "JAVA_HOME: $JAVA_HOME"'
                sh 'echo "PATH: $PATH"'
                sh 'java -version || true'
                sh 'mvn -version || true'
                sh 'ls -la $JAVA_HOME/bin || true'
            }
        }

        stage('Cloner le dépôt') {
            steps {
                git branch: 'YasmineAttia-4twin3-Apollo', url: 'https://github.com/anasmnasri2023/4TWIN3appologestion-station-ski.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'scanner'
                    withSonarQubeEnv {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build and Deploy') {
            steps {
                script {
                    // Build Docker images
                    sh 'docker-compose build'

                    // Start MySQL and wait for it to be ready
                    sh 'docker-compose up -d db'
                    sh '''
                        while ! docker exec stationski-db mysqladmin ping -uroot -proot --silent; do
                            echo "Waiting for MySQL..."
                            sleep 5
                        done
                    '''

                    // Start the full application
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            echo 'Build completed'
        }
    }
}
