pipeline {
    agent any

    environment {
        // Define environment variables
        SONAR_SERVER = 'http://your-sonar-server:9000'
        SONAR_TOKEN = credentials('sonar-token')
        REGISTRY = '192.168.33.10:8083'
        REGISTRY_CREDENTIALS = 'nexus-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone your GitHub repository
                checkout scm
            }
        }

        stage('Build') {
            steps {
                script {
                    // Install dependencies and build the package (skip tests for now)
                    sh 'mvn clean compile -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run all tests
                    sh 'mvn test'
                }
            }
            post {
                always {
                    // Publish test results
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Run SonarQube analysis
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar -Dsonar.projectKey=springboot-app -Dsonar.host.url=${SONAR_SERVER} -Dsonar.login=${SONAR_TOKEN}'
                    }

                    // Wait for quality gate result (optional but recommended)
                    timeout(time: 2, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Package') {
            steps {
                script {
                    // Create final JAR file
                    sh 'mvn package -DskipTests'
                    // Archive the built JAR
                    archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                }
            }
        }

        // Building Docker images
        stage('Building images') {
            steps {
                script {
                    sh('docker-compose build')
                }
            }
        }

        // Uploading Docker images into Nexus Registry
        stage('Deploy to Nexus') {
            steps {
                script {
                    // Tag the image for your Nexus registry
                    sh 'docker tag devops-pipeline_ghassen_spring_app:latest ${REGISTRY}/springbootapp:1.0'

                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                        sh "docker login ${REGISTRY} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}"
                        sh 'docker push ${REGISTRY}/springbootapp:1.0'
                    }
                }
            }
        }

        stage('Run application') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                        sh "docker login ${REGISTRY} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}"
                        sh "docker pull ${REGISTRY}/springbootapp:1.0"
                        sh 'docker-compose up -d'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
            // Clean up workspace if needed
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}