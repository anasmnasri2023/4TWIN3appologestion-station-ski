pipeline {
    agent any

    environment {
        // Define environment variables
        SONAR_SERVER = 'http://sonarqube:9000'  // Update with your SonarQube server URL
        SONAR_TOKEN = credentials('sonar-token') // Make sure this credential exists in Jenkins
        REGISTRY = '192.168.33.10:8083'
        REGISTRY_CREDENTIALS = 'nexus-credentials' // Make sure this credential exists in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone your GitHub repository
                checkout scm
            }
        }

        stage('Build') {
            steps {
                // Install dependencies and build the package (skip tests for now)
                sh 'mvn clean compile -DskipTests'
            }
        }

        stage('Test') {
            steps {
                // Run all tests
                sh 'mvn test'
            }
            post {
                always {
                    // Publish test results
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(installationName: 'SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Package') {
            steps {
                // Create final JAR file
                sh 'mvn package -DskipTests'
                // Archive the built JAR
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true, allowEmptyArchive: true
            }
        }

        // Building Docker images
        stage('Building images') {
            steps {
                sh 'docker-compose build'
            }
        }

        // Uploading Docker images into Nexus Registry
        stage('Deploy to Nexus') {
            steps {
                // Tag the image for your Nexus registry
                sh "docker tag devops-pipeline_ghassen_spring_app:latest ${REGISTRY}/springbootapp:1.0"

                withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                    sh "docker login ${REGISTRY} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}"
                    sh "docker push ${REGISTRY}/springbootapp:1.0"
                }
            }
        }

        stage('Run application') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${REGISTRY_CREDENTIALS}", passwordVariable: 'REGISTRY_PASSWORD', usernameVariable: 'REGISTRY_USERNAME')]) {
                    sh "docker login ${REGISTRY} -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD}"
                    sh "docker pull ${REGISTRY}/springbootapp:1.0"
                    sh 'docker-compose up -d'
                }
            }
        }
    }

    post {
        always {
            node(null) {
                echo 'Pipeline completed'
                cleanWs()
            }
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}